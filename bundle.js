(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var outerWidth = 520;
var outerHeight = 520;
var margin = { left: 90, top: 30, right: 30, bottom: 80 };
var innerWidth = outerWidth - margin.left - margin.right;
var innerHeight = outerHeight - margin.top - margin.bottom;
var xColumn = "Sell";
var yColumn = "Living";
var xAxisText = xColumn;
var xAxisLabelOffset = 50;
var yAxisText = yColumn;
var yAxisLabelOffset = 45;
//most outer element
var svg = d3.select("body").append("svg")
    .attr("width", outerWidth)
    .attr("height", outerHeight);
//element within outer svg, centered via margins
var g = svg.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
var xAxisG = g.append("g")
    .attr("transform", "translate(0," + innerHeight + ")")
    .attr("class", "x axis");
var xAxisLabel = xAxisG.append("text")
    .style("text-anchor", "middle")
    .attr("x", innerWidth / 2)
    .attr("y", xAxisLabelOffset)
    .attr("class", "label")
    .text(xAxisText);
var yAxisG = g.append("g")
    .attr("class", "y axis");
var yAxisLabel = yAxisG.append("text")
    .style("text-anchor", "middle")
    .attr("transform", "translate(-" + yAxisLabelOffset + "," + innerHeight / 2 + ") rotate(-90)")
    .attr("class", "label")
    .text(yAxisText);
//x and y scales (y inverted because top->bottom)
var xScale = d3.scale.linear().range([0, innerWidth]);
var yScale = d3.scale.linear().range([innerHeight, 0]);
var xAxis = d3.svg.axis().scale(xScale).orient("bottom")
    .outerTickSize(0)
    .ticks(5);
var yAxis = d3.svg.axis().scale(yScale).orient("left")
    .ticks(5)
    .tickFormat(d3.format("s"))
    .outerTickSize(0);
function render(data) {
    // Bind data
    //console.log(data);
    var xDomain = d3.extent(data, function (d) { return d[xColumn]; });
    var yDomain = d3.extent(data, function (d) { return d[yColumn]; });
    xScale.domain([xDomain[0] * 0.9, xDomain[1] * 1.1]);
    yScale.domain([yDomain[0] * 0.9, yDomain[1] * 1.1]);
    xAxisG.call(xAxis);
    yAxisG.call(yAxis);
    var circles = g.selectAll("circle").data(data);
    // Enter
    circles.enter().append("circle")
        .attr("r", 5);
    // Update
    circles
        .attr("cx", function (d) { return xScale(d[xColumn]); })
        .attr("cy", function (d) { return yScale(d[yColumn]); });
    // Exit
    circles.exit().remove();
}
//parses strings from file to ints
function type(d) {
    d[yColumn] = +d[yColumn];
    d[xColumn] = +d[xColumn];
    return d;
}
d3.csv("data/homes.csv", type, render);
},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDYUEsSUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDO0FBQ3ZCLElBQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUV4QixJQUFNLE1BQU0sR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQztBQUU1RCxJQUFJLFVBQVUsR0FBRyxVQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ3pELElBQUksV0FBVyxHQUFHLFdBQVcsR0FBRyxNQUFNLENBQUMsR0FBRyxHQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFFNUQsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDO0FBQ3JCLElBQUksT0FBTyxHQUFHLFFBQVEsQ0FBQztBQUV2QixJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUM7QUFDeEIsSUFBSSxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7QUFDMUIsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDO0FBQ3hCLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0FBRTFCLG9CQUFvQjtBQUNwQixJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7S0FDeEMsSUFBSSxDQUFDLE9BQU8sRUFBRyxVQUFVLENBQUM7S0FDMUIsSUFBSSxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUU3QixnREFBZ0Q7QUFDaEQsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7S0FDdEIsSUFBSSxDQUFDLFdBQVcsRUFBRSxZQUFZLEdBQUMsTUFBTSxDQUFDLElBQUksR0FBQyxHQUFHLEdBQUMsTUFBTSxDQUFDLEdBQUcsR0FBQyxHQUFHLENBQUMsQ0FBQztBQUVoRSxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztLQUN6QixJQUFJLENBQUMsV0FBVyxFQUFFLGNBQWMsR0FBRyxXQUFXLEdBQUcsR0FBRyxDQUFDO0tBQ3JELElBQUksQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDekIsSUFBSSxVQUFVLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7S0FDckMsS0FBSyxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUM7S0FDOUIsSUFBSSxDQUFDLEdBQUcsRUFBRSxVQUFVLEdBQUcsQ0FBQyxDQUFDO0tBQ3pCLElBQUksQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLENBQUM7S0FDM0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUM7S0FDdEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2pCLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO0tBQ3pCLElBQUksQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDekIsSUFBSSxVQUFVLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7S0FDckMsS0FBSyxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUM7S0FDOUIsSUFBSSxDQUFDLFdBQVcsRUFBQyxhQUFhLEdBQUMsZ0JBQWdCLEdBQUMsR0FBRyxHQUFDLFdBQVcsR0FBQyxDQUFDLEdBQUMsZUFBZSxDQUFDO0tBQ2xGLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDO0tBQ3RCLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUVqQixpREFBaUQ7QUFDakQsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUN0RCxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRXZELElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7S0FDckQsYUFBYSxDQUFDLENBQUMsQ0FBQztLQUNoQixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDWixJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO0tBQ25ELEtBQUssQ0FBQyxDQUFDLENBQUM7S0FDUixVQUFVLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUMxQixhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFHcEIsU0FBUyxNQUFNLENBQUMsSUFBZ0I7SUFDaEMsWUFBWTtJQUNSLG9CQUFvQjtJQUNwQixJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsSUFBRyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxJQUFHLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBQyxHQUFHLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDL0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBQyxHQUFHLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFL0MsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRW5CLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRS9DLFFBQVE7SUFDUixPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztTQUMvQixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRWQsU0FBUztJQUNULE9BQU87U0FDTixJQUFJLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxJQUFHLE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3RELElBQUksQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLElBQUcsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV4RCxPQUFPO0lBQ1AsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQzVCLENBQUM7QUFFRCxrQ0FBa0M7QUFDbEMsU0FBUyxJQUFJLENBQUMsQ0FBYTtJQUN2QixDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pCLE9BQU8sQ0FBQyxDQUFDO0FBQ2IsQ0FBQztBQUVELEVBQUUsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUMsSUFBSSxFQUFDLE1BQU0sQ0FBQyxDQUFDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiXHJcbmV4cG9ydHt9XHJcbi8vaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xyXG5pbXBvcnQgKiBhcyBfZDMgZnJvbSBcImQzXCI7XHJcblxyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgY29uc3QgZDM6IHR5cGVvZiBfZDM7XHJcbn1cclxuXHJcbmludGVyZmFjZSBkYXRhb2JqZWN0IHtcclxuICBba2V5OiBzdHJpbmddOiBzdHJpbmd8bnVtYmVyO1xyXG59XHJcbiBcclxuY29uc3Qgb3V0ZXJXaWR0aCA9IDUyMDtcclxuY29uc3Qgb3V0ZXJIZWlnaHQgPSA1MjA7XHJcblxyXG5jb25zdCBtYXJnaW4gPSB7IGxlZnQ6IDkwLCB0b3A6IDMwLCByaWdodDogMzAsIGJvdHRvbTogODAgfTtcclxuXHJcbmxldCBpbm5lcldpZHRoID0gb3V0ZXJXaWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xyXG5sZXQgaW5uZXJIZWlnaHQgPSBvdXRlckhlaWdodCAtIG1hcmdpbi50b3AgIC0gbWFyZ2luLmJvdHRvbTtcclxuXHJcbmxldCB4Q29sdW1uID0gXCJTZWxsXCI7XHJcbmxldCB5Q29sdW1uID0gXCJMaXZpbmdcIjtcclxuXHJcbmxldCB4QXhpc1RleHQgPSB4Q29sdW1uO1xyXG5sZXQgeEF4aXNMYWJlbE9mZnNldCA9IDUwO1xyXG5sZXQgeUF4aXNUZXh0ID0geUNvbHVtbjtcclxubGV0IHlBeGlzTGFiZWxPZmZzZXQgPSA0NTtcclxuXHJcbi8vbW9zdCBvdXRlciBlbGVtZW50XHJcbmxldCBzdmcgPSBkMy5zZWxlY3QoXCJib2R5XCIpLmFwcGVuZChcInN2Z1wiKVxyXG4uYXR0cihcIndpZHRoXCIsICBvdXRlcldpZHRoKVxyXG4uYXR0cihcImhlaWdodFwiLCBvdXRlckhlaWdodCk7XHJcblxyXG4vL2VsZW1lbnQgd2l0aGluIG91dGVyIHN2ZywgY2VudGVyZWQgdmlhIG1hcmdpbnNcclxubGV0IGcgPSBzdmcuYXBwZW5kKFwiZ1wiKVxyXG4uYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIittYXJnaW4ubGVmdCtcIixcIittYXJnaW4udG9wK1wiKVwiKTtcclxuXHJcbmxldCB4QXhpc0cgPSBnLmFwcGVuZChcImdcIilcclxuLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIGlubmVySGVpZ2h0ICsgXCIpXCIpXHJcbi5hdHRyKFwiY2xhc3NcIiwgXCJ4IGF4aXNcIik7XHJcbmxldCB4QXhpc0xhYmVsID0geEF4aXNHLmFwcGVuZChcInRleHRcIilcclxuLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcclxuLmF0dHIoXCJ4XCIsIGlubmVyV2lkdGggLyAyKVxyXG4uYXR0cihcInlcIiwgeEF4aXNMYWJlbE9mZnNldClcclxuLmF0dHIoXCJjbGFzc1wiLCBcImxhYmVsXCIpXHJcbi50ZXh0KHhBeGlzVGV4dCk7XHJcbmxldCB5QXhpc0cgPSBnLmFwcGVuZChcImdcIilcclxuLmF0dHIoXCJjbGFzc1wiLCBcInkgYXhpc1wiKTtcclxubGV0IHlBeGlzTGFiZWwgPSB5QXhpc0cuYXBwZW5kKFwidGV4dFwiKVxyXG4uc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxyXG4uYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKC1cIit5QXhpc0xhYmVsT2Zmc2V0K1wiLFwiK2lubmVySGVpZ2h0LzIrXCIpIHJvdGF0ZSgtOTApXCIpXHJcbi5hdHRyKFwiY2xhc3NcIiwgXCJsYWJlbFwiKVxyXG4udGV4dCh5QXhpc1RleHQpO1xyXG5cclxuLy94IGFuZCB5IHNjYWxlcyAoeSBpbnZlcnRlZCBiZWNhdXNlIHRvcC0+Ym90dG9tKVxyXG5sZXQgeFNjYWxlID0gZDMuc2NhbGUubGluZWFyKCkucmFuZ2UoWzAsIGlubmVyV2lkdGhdKTtcclxubGV0IHlTY2FsZSA9IGQzLnNjYWxlLmxpbmVhcigpLnJhbmdlKFtpbm5lckhlaWdodCwgMF0pO1xyXG5cclxubGV0IHhBeGlzID0gZDMuc3ZnLmF4aXMoKS5zY2FsZSh4U2NhbGUpLm9yaWVudChcImJvdHRvbVwiKVxyXG4gIC5vdXRlclRpY2tTaXplKDApXHJcbiAgLnRpY2tzKDUpO1xyXG5sZXQgeUF4aXMgPSBkMy5zdmcuYXhpcygpLnNjYWxlKHlTY2FsZSkub3JpZW50KFwibGVmdFwiKVxyXG4gIC50aWNrcyg1KVxyXG4gIC50aWNrRm9ybWF0KGQzLmZvcm1hdChcInNcIikpXHJcbiAgLm91dGVyVGlja1NpemUoMCk7XHJcblxyXG5cclxuZnVuY3Rpb24gcmVuZGVyKGRhdGE6IEFycmF5PGFueT4pe1xyXG4vLyBCaW5kIGRhdGFcclxuICAgIC8vY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICBsZXQgeERvbWFpbiA9IGQzLmV4dGVudChkYXRhLCBmdW5jdGlvbiAoZCl7IHJldHVybiBkW3hDb2x1bW5dOyB9KTtcclxuICAgIGxldCB5RG9tYWluID0gZDMuZXh0ZW50KGRhdGEsIGZ1bmN0aW9uIChkKXsgcmV0dXJuIGRbeUNvbHVtbl07IH0pO1xyXG4gICAgeFNjYWxlLmRvbWFpbihbeERvbWFpblswXSowLjkseERvbWFpblsxXSoxLjFdKTtcclxuICAgIHlTY2FsZS5kb21haW4oW3lEb21haW5bMF0qMC45LHlEb21haW5bMV0qMS4xXSk7XHJcblxyXG4gICAgeEF4aXNHLmNhbGwoeEF4aXMpO1xyXG4gICAgeUF4aXNHLmNhbGwoeUF4aXMpO1xyXG4gICBcclxuICAgIGxldCBjaXJjbGVzID0gZy5zZWxlY3RBbGwoXCJjaXJjbGVcIikuZGF0YShkYXRhKTtcclxuXHJcbiAgICAvLyBFbnRlclxyXG4gICAgY2lyY2xlcy5lbnRlcigpLmFwcGVuZChcImNpcmNsZVwiKVxyXG4gICAgLmF0dHIoXCJyXCIsIDUpO1xyXG5cclxuICAgIC8vIFVwZGF0ZVxyXG4gICAgY2lyY2xlc1xyXG4gICAgLmF0dHIoXCJjeFwiLCBmdW5jdGlvbiAoZCl7IHJldHVybiB4U2NhbGUoZFt4Q29sdW1uXSk7IH0pXHJcbiAgICAuYXR0cihcImN5XCIsIGZ1bmN0aW9uIChkKXsgcmV0dXJuIHlTY2FsZShkW3lDb2x1bW5dKTsgfSk7XHJcblxyXG4gICAgLy8gRXhpdFxyXG4gICAgY2lyY2xlcy5leGl0KCkucmVtb3ZlKCk7XHJcbn1cclxuXHJcbi8vcGFyc2VzIHN0cmluZ3MgZnJvbSBmaWxlIHRvIGludHNcclxuZnVuY3Rpb24gdHlwZShkOiBkYXRhb2JqZWN0KXtcclxuICAgIGRbeUNvbHVtbl0gPSArZFt5Q29sdW1uXTtcclxuICAgIGRbeENvbHVtbl0gPSArZFt4Q29sdW1uXTtcclxuICAgIHJldHVybiBkO1xyXG59XHJcblxyXG5kMy5jc3YoXCJkYXRhL2hvbWVzLmNzdlwiLHR5cGUscmVuZGVyKTtcclxuIl19
